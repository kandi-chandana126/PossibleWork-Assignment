#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <string>
#include <json/json.h>
#include <cmath>

using namespace std;


long long convertToDecimal(const string &num, int base) {
    return stoll(num, nullptr, base);
}


long long lagrangeInterpolation(vector<pair<int, long long>> &points) {
    int k = points.size();
    long long c = 0;
    
    for (int i = 0; i < k; ++i) {
        long long term = points[i].second;
        long long denominator = 1;
        
        for (int j = 0; j < k; ++j) {
            if (i != j) {
                term *= -points[j].first;
                denominator *= (points[i].first - points[j].first);
            }
        }
        
        c += term / denominator;
    }
    
    return c;
}


void processJSON(const string &filename) {
    ifstream file(filename);
    Json::Value root;
    file >> root;
    
    int n = root["keys"]["n"].asInt();
    int k = root["keys"]["k"].asInt();
    
    vector<pair<int, long long>> points;
    
    for (Json::Value::const_iterator it = root.begin(); it != root.end(); ++it) {
        if (it.key().asString() != "keys") {
            int x = stoi(it.key().asString());
            int base = (*it)["base"].asInt();
            string value = (*it)["value"].asString();
            long long y = convertToDecimal(value, base);
            points.emplace_back(x, y);
        }
    }
    
    
    sort(points.begin(), points.end());
    points.resize(k);
    
    long long secret = lagrangeInterpolation(points);
    cout << "Secret: " << secret << endl;
}

int main() {
    processJSON("testcase1.json");
    processJSON("testcase2.json");
    return 0;
}
